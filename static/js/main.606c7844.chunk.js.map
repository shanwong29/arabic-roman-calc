{"version":3,"sources":["App.styles.js","store/context.js","Component/Display/Display.styles.js","Component/Display/Display.js","Component/Panel/Panel.styles.js","Component/Panel/Panel.js","Component/NumModeSwitch/NumModeSwitch.styles.js","Component/NumModeSwitch/NumModeSwitch.js","Component/DarkModeSwitch/DarkModeSwitch.styles.js","Component/DarkModeSwitch/DarkModeSwitch.js","service/calculator.js","service/getArabicAns.js","service/convertRomanToArabic.js","service/convertArabicToRoman.js","store/useGlobalState.js","StylesStore/GlobalStyles.js","StylesStore/theme.js","store/GloblaStateProvider.js","App.js","serviceWorker.js","index.js"],"names":["CalcWrapper","styled","div","theme","baseColor","breakpoints","sm","AppWrapper","Context","createContext","InputDisplay","input","themeStyle","background","text","AnsWrapper","Display","state","useContext","value","readOnly","ans","errorMsg","NumBtnsWrapper","OperatorWrapper","ClearBtnsWrapper","EqualBtn","button","isRomanMode","btnColor","function","NumberBtn","langStyle","color","FunctionBtn","Panel","numBtns","dispatch","map","el","i","key","onClick","type","payload","operators","handleOperatorAndDot","sign","length","alert","dotBtn","backSpaceBtn","clearAllBtn","equalBtn","switchBtnBgColor","isActive","NumSwitchWrapper","SwitchBtn","NumModeSwitch","isArabicMode","switchColor","DarkModeSwitch","isDarkMode","Calculator","num1","num2","method","this","addition","subtraction","multiplication","division","isOperator","char","operatorModifier","operatorSign","getArabicAns","numberArr","operatorArr","startCuttingPt","number","slice","push","Number","operator","calculation","toFixed","convertNumFromRomanToArabic","givenRomanNumStr","test","romanNumDict","I","V","X","L","C","D","M","pointer","currentAlphabet","nextAlphabet","convertExpFromRomanToArabic","givenExp","numRegex","numStr","ansArr","arabicNum","join","convertNumFromArabicToRoman","givenNum","isInteger","givenNumStr","toString","counter","currentDigit","repeat","initialState","getRomanAns","arabicExp","arabicAns","reducer","action","newAns","newInput","expArr","convertExpFromArabicToRoman","lastChar","isLastCharOperator","useGlobalState","useReducer","GlobalStyles","createGlobalStyle","btnSize","default","focus","light","dark","romanStyle","arabicStyle","GlobalStateProvider","children","Provider","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.606c7844.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const CalcWrapper = styled.div`\n  display: grid;\n  /* grid-template-columns: repeat(4, 6vw); */\n  grid-template-columns: repeat(4, 82px);\n  grid-template-areas:\n    \"input      input     input      input\"\n    \"answer     answer    answer     answer\"\n    \"langMode   langMode  langMode   langMode\"\n    \".          .         clearBtns  clearBtns\"\n    \"number     number    number     operator\"\n    \"number     number    number     operator\"\n    \"number     number    number     operator\"\n    \"number     number    number     operator\";\n  border: solid 2px ${({ theme }) => theme.baseColor};\n  border-radius: 25px;\n  /* padding: 2vw; */\n  padding: 28px;\n  align-self: center;\n  justify-content: center;\n  /* width: 28vw; */\n  width: 382px;\n  margin-top: 40px;\n  @media ${({ theme }) => theme.breakpoints.sm} {\n    grid-template-columns: repeat(4, 20vw);\n    width: 90vw;\n    margin-top: 20vw;\n  }\n`;\n\nexport const AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const NavWrapper = styled.div`\n  width: 100vw;\n  display: flex;\n  justify-content: flex-end;\n`;\n","import { createContext } from \"react\";\n\nconst Context = createContext({});\n// the arg in createContext fn is the initial-data you want to pass though the app\n/* Creates a Context object. When React renders a component that subscribes to this Context object \nit will read the current context value from the closest matching Provider above it in the tree. */\n\nexport default Context;\n","import styled from \"styled-components\";\n\nexport const InputDisplay = styled.input`\n  grid-area: input;\n  min-height: 2rem;\n  font-size: 1.1rem;\n  background: ${({ theme }) => theme.themeStyle.background};\n  color: ${({ theme }) => theme.themeStyle.text};\n  border: none;\n  outline: none;\n`;\n\nexport const AnsWrapper = styled.div`\n  grid-area: answer;\n  min-height: 3rem;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  text-align: right;\n\n  & > span {\n    font-size: 1.1rem;\n    line-height: 1rem;\n  }\n\n  & > p {\n    font-size: 2rem;\n  }\n`;\n","import React, { useContext } from \"react\";\nimport Context from \"../../store/context\";\nimport * as Styled from \"./Display.styles\";\n\nfunction Display() {\n  const { state } = useContext(Context);\n\n  return (\n    <>\n      <Styled.InputDisplay value={state.input} readOnly />\n      <Styled.AnsWrapper>\n        <p>{state.ans}</p> <span>{state.errorMsg}</span>\n      </Styled.AnsWrapper>\n    </>\n  );\n}\n\nexport default Display;\n","import styled from \"styled-components\";\n\nexport const NumBtnsWrapper = styled.div`\n  display: grid;\n  grid-area: number;\n  grid-template-columns: repeat(3, 1fr);\n  justify-items: center;\n  align-items: center;\n  justify-items: center;\n  align-items: end;\n`;\n\nexport const OperatorWrapper = styled.div`\n  display: grid;\n  grid-area: operator;\n  grid-template-columns: repeat(1, 1fr);\n  justify-items: center;\n  align-items: center;\n`;\n\nexport const ClearBtnsWrapper = styled.div`\n  grid-area: clearBtns;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nexport const EqualBtn = styled.button`\n  grid-column: ${({ isRomanMode }) => isRomanMode && `span 2`};\n  width: ${({ isRomanMode }) => isRomanMode && `100%`};\n  border-radius: ${({ isRomanMode }) => isRomanMode && `25px`};\n  color: ${({ theme }) => theme.btnColor.function};\n  border-color: ${({ theme }) => theme.btnColor.function};\n  &:hover {\n    background: ${({ theme }) => theme.btnColor.function};\n  }\n`;\n\nexport const NumberBtn = styled.button`\n  color: ${({ theme }) => theme.langStyle.color};\n  border-color: ${({ theme }) => theme.langStyle.color};\n  &:hover {\n    background: ${({ theme }) => theme.langStyle.color};\n  }\n`;\n\nexport const FunctionBtn = styled.button`\n  color: ${({ theme }) => theme.btnColor.function};\n  border-color: ${({ theme }) => theme.btnColor.function};\n  &:hover {\n    background: ${({ theme }) => theme.btnColor.function};\n  }\n`;\n","import React, { useContext } from \"react\";\nimport Context from \"../../store/context\";\nimport * as Styled from \"./Panel.styles\";\n\nfunction Panel() {\n  const { state, dispatch } = useContext(Context);\n\n  ////////////////////////// Number btns ///////////////////////////////\n\n  let numBtns;\n  if (state.isRomanMode) {\n    numBtns = [`M`, `D`, `C`, `L`, `X`, `V`, `I`];\n  } else {\n    numBtns = [`7`, `8`, `9`, `4`, `5`, `6`, `1`, `2`, `3`, `0`];\n  }\n\n  numBtns = numBtns.map((el, i) => {\n    return (\n      <Styled.NumberBtn\n        key={i}\n        onClick={() =>\n          !state.errorMsg &&\n          dispatch({ type: `ADD_NUMBER_TO_INPUT`, payload: el })\n        }\n      >\n        {el}\n      </Styled.NumberBtn>\n    );\n  });\n\n  ////////////////////////// operator btns ///////////////////////////////\n\n  let operators = [`\\u00F7`, `\\u00D7`, `-`, `+`];\n\n  const handleOperatorAndDot = (sign) => {\n    if (state.errorMsg) {\n      return;\n    }\n    if (state.input.length) {\n      dispatch({ type: `ADD_OPERATOR_OR_DOT_TO_INPUT`, payload: sign });\n    } else {\n      alert(\"The first input need to be a number.\");\n    }\n  };\n\n  operators = operators.map((el, i) => {\n    return (\n      <Styled.FunctionBtn key={i} onClick={() => handleOperatorAndDot(el)}>\n        {el}\n      </Styled.FunctionBtn>\n    );\n  });\n\n  const dotBtn = (\n    <Styled.FunctionBtn onClick={() => handleOperatorAndDot(\".\")}>\n      .\n    </Styled.FunctionBtn>\n  );\n\n  ////////////////////////// other btns ///////////////////////////////\n\n  const backSpaceBtn = (\n    <Styled.FunctionBtn\n      onClick={() => {\n        state.input && dispatch({ type: \"HANDLE_INPUT_BACKSPACE\" });\n      }}\n    >\n      &#8592;\n    </Styled.FunctionBtn>\n  );\n\n  const clearAllBtn = (\n    <Styled.FunctionBtn\n      onClick={() => {\n        state.input && dispatch({ type: `CLEAR_INPUT_&_ANS` });\n      }}\n    >\n      AC\n    </Styled.FunctionBtn>\n  );\n\n  const equalBtn = (\n    <Styled.EqualBtn\n      isRomanMode={state.isRomanMode}\n      onClick={() => {\n        state.input && dispatch({ type: `GET_ANS` });\n      }}\n    >\n      =\n    </Styled.EqualBtn>\n  );\n\n  return (\n    <>\n      <Styled.ClearBtnsWrapper>\n        {backSpaceBtn}\n        {clearAllBtn}\n      </Styled.ClearBtnsWrapper>\n      <Styled.NumBtnsWrapper>\n        {numBtns}\n        {!state.isRomanMode && dotBtn}\n        {equalBtn}\n      </Styled.NumBtnsWrapper>\n      <Styled.OperatorWrapper>{operators}</Styled.OperatorWrapper>\n    </>\n  );\n}\n\nexport default Panel;\n","import styled from \"styled-components\";\n\nconst switchBtnBgColor = ({ isActive, theme }) => {\n  return isActive ? theme.langStyle.color : theme.baseColor;\n};\n\nexport const NumSwitchWrapper = styled.div`\n  grid-area: langMode;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nexport const SwitchBtn = styled.button`\n  width: 100%;\n  border-radius: 20px;\n  margin: 10px 5px;\n  color: ${switchBtnBgColor};\n  border-color: ${switchBtnBgColor};\n  &:hover {\n    color: ${switchBtnBgColor};\n  }\n`;\n\nexport const RomanSwitch = styled.button``;\n","import React, { useContext } from \"react\";\nimport Context from \"../../store/context\";\nimport * as Styled from \"./NumModeSwitch.styles\";\n\nconst NumModeSwitch = () => {\n  const { state, dispatch } = useContext(Context);\n\n  const isArabicMode = !state.isRomanMode;\n\n  return (\n    <Styled.NumSwitchWrapper>\n      <Styled.SwitchBtn\n        isActive={isArabicMode}\n        onClick={() => {\n          state.isRomanMode && dispatch({ type: `CHANGE_LANG_MODE` });\n        }}\n      >\n        Arabic\n      </Styled.SwitchBtn>\n      <Styled.SwitchBtn\n        isActive={state.isRomanMode}\n        onClick={() => {\n          isArabicMode && dispatch({ type: `CHANGE_LANG_MODE` });\n        }}\n      >\n        Roman\n      </Styled.SwitchBtn>\n    </Styled.NumSwitchWrapper>\n  );\n};\n\nexport default NumModeSwitch;\n","import styled from \"styled-components\";\n\nexport const SwitchBtn = styled.button`\n  position: absolute;\n  left: 80%;\n  margin-top: 5px;\n  font-size: 3rem;\n  border: none;\n  color: ${({ theme }) => theme.themeStyle.switchColor};\n  &:hover {\n    color: ${({ theme }) => theme.themeStyle.switchColor};\n    transform: scale(1.1);\n  }\n  &:focus {\n    box-shadow: none;\n  }\n`;\n","import React, { useContext } from \"react\";\nimport Context from \"../../store/context\";\nimport * as Styled from \"./DarkModeSwitch.styles\";\n\n/* useContext \n==> Accepts a context object (the value returned from React.createContext) and \nreturns the current context value for that context. \nThe current context value is determined by the value prop of the nearest <MyContext.Provider> above the calling component in the tree. */\n\nconst DarkModeSwitch = () => {\n  const { state, dispatch } = useContext(Context);\n\n  return (\n    <Styled.SwitchBtn onClick={() => dispatch({ type: \"TOGGLE_DARK_MODE\" })}>\n      {state.isDarkMode ? `\\uD83C\\uDF1E` : `\\uD83C\\uDF19`}\n    </Styled.SwitchBtn>\n  );\n};\n\nexport default DarkModeSwitch;\n","class Calculator {\n  constructor(num1, num2, method) {\n    this.num1 = num1;\n    this.num2 = num2;\n    this.method = method;\n  }\n\n  addition() {\n    return this.num1 + this.num2;\n  }\n\n  subtraction() {\n    return this.num1 - this.num2;\n  }\n\n  multiplication() {\n    return this.num1 * this.num2;\n  }\n\n  division() {\n    return this.num1 / this.num2;\n  }\n\n  calculation() {\n    switch (this.method) {\n      case \"+\":\n        return this.addition();\n\n      case \"-\":\n        return this.subtraction();\n\n      case \"*\":\n        return this.multiplication();\n\n      case \"/\":\n        return this.division();\n\n      default:\n        //no sign is found\n        return this.num1;\n    }\n  }\n}\n\nexport default Calculator;\n","import Calculator from \"./calculator\";\n\nexport const isOperator = (char) => {\n  if (\n    char === \"+\" ||\n    char === \"-\" ||\n    char === \"\\u00D7\" || // \"*\"\n    char === \"\\u00F7\" //\"/\"\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst operatorModifier = (operatorSign) => {\n  switch (operatorSign) {\n    case \"\\u00D7\":\n      return \"*\";\n    case \"\\u00F7\":\n      return \"/\";\n    default:\n      return operatorSign;\n  }\n};\n\nexport const getArabicAns = (input) => {\n  //input is a str\n\n  let numberArr = [];\n  let operatorArr = [];\n  let startCuttingPt = 0;\n\n  for (let i = 0; i < input.length; i++) {\n    if (input[i] === \".\" && i === input.length - 1) {\n      // when dot is at the end: e.g. 9+9.\n      const number = input.slice(startCuttingPt, i);\n      numberArr.push(Number(number));\n    } else if (isOperator(input[i])) {\n      const number = input.slice(startCuttingPt, i);\n      const operator = input.slice(i, i + 1);\n\n      numberArr.push(Number(number));\n      operatorArr.push(operatorModifier(operator));\n      startCuttingPt = i + 1;\n    } else if (i === input.length - 1) {\n      const number = input.slice(startCuttingPt);\n      numberArr.push(Number(number));\n    }\n  }\n\n  let ans = numberArr[0];\n\n  for (let i = 1; i < numberArr.length; i++) {\n    ans = new Calculator(ans, numberArr[i], operatorArr[i - 1]);\n    ans = ans.calculation();\n  }\n\n  if (!ans && ans !== 0) {\n    return {\n      errorMsg: `Invalid Input`,\n    };\n  }\n\n  ans = ans.toFixed(7);\n  return Number(ans);\n};\n","const convertNumFromRomanToArabic = (givenRomanNumStr) => {\n  // this fn recieve a str, return a number\n  if (!givenRomanNumStr.length || !givenRomanNumStr) {\n    return \"\";\n  }\n\n  const validRomanNumRegex = /^M{0,3}(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})$/g;\n  if (!validRomanNumRegex.test(givenRomanNumStr)) {\n    return { errorMsg: \"Given Roman number is invalid\" };\n  }\n\n  let romanNumDict = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n  };\n\n  let pointer = 0;\n  let ans = 0;\n\n  while (pointer < givenRomanNumStr.length) {\n    const currentAlphabet = givenRomanNumStr[pointer];\n    const nextAlphabet = givenRomanNumStr[pointer + 1];\n    const isSpecialCase1 =\n      currentAlphabet === \"I\" && (nextAlphabet === \"V\" || nextAlphabet === \"X\");\n    const isSpecialCase2 =\n      currentAlphabet === \"X\" && (nextAlphabet === \"L\" || nextAlphabet === \"C\");\n    const isSpecialCase3 =\n      currentAlphabet === \"C\" && (nextAlphabet === \"D\" || nextAlphabet === \"M\");\n\n    if (isSpecialCase1 || isSpecialCase2 || isSpecialCase3) {\n      const numToBeAdded =\n        romanNumDict[nextAlphabet] - romanNumDict[currentAlphabet];\n      ans += numToBeAdded;\n      pointer += 2;\n    } else {\n      ans += romanNumDict[currentAlphabet];\n      pointer++;\n    }\n  }\n\n  return ans;\n};\n\nconst convertExpFromRomanToArabic = (givenExp) => {\n  //givenExp is always string\n  //This function should return a str\n  if (!givenExp.length) {\n    return \"\";\n  }\n\n  const numRegex = /I|V|X|L|C|D|M/;\n  let numStr = \"\";\n  let ansArr = [];\n\n  for (let i = 0; i < givenExp.length; i++) {\n    if (numRegex.test(givenExp[i])) {\n      //if it is number\n      numStr += givenExp[i];\n\n      if (i === givenExp.length - 1 && numStr.length > 0) {\n        let arabicNum = convertNumFromRomanToArabic(numStr);\n        if (arabicNum.errorMsg) {\n          return arabicNum;\n        }\n        ansArr.push(arabicNum);\n      }\n    } else {\n      //not a number\n      let arabicNum = convertNumFromRomanToArabic(numStr);\n      if (arabicNum.errorMsg) {\n        return arabicNum;\n      }\n      ansArr.push(arabicNum);\n      ansArr.push(givenExp[i]);\n      numStr = \"\";\n    }\n  }\n  return ansArr.join(\"\");\n};\n\nexport { convertNumFromRomanToArabic, convertExpFromRomanToArabic };\n","import { isOperator } from \"./getArabicAns\";\n\nconst convertNumFromArabicToRoman = (givenNum) => {\n  //givenNum is always a numberized value\n  //This function should return a str\n  if (!givenNum && givenNum !== 0) {\n    return \"\";\n  }\n\n  if (!Number.isInteger(givenNum)) {\n    return { errorMsg: \"Roman number can only be integer\" };\n  }\n\n  if (givenNum <= 0 || givenNum > 3999) {\n    return {\n      errorMsg: `Roman number can only in the following range: 0 < n < 3999`,\n    };\n  }\n\n  let givenNumStr = givenNum.toString();\n\n  const romanNumDict = {\n    \"1\": \"I\",\n    \"5\": \"V\",\n    \"10\": \"X\",\n    \"50\": \"L\",\n    \"100\": \"C\",\n    \"500\": \"D\",\n    \"1000\": \"M\",\n  };\n\n  let pointer = givenNumStr.length - 1;\n  let counter = 1;\n  let ans = \"\";\n\n  while (pointer >= 0) {\n    const currentDigit = givenNumStr[pointer];\n\n    let romanCharToBeAdded;\n    if (currentDigit === \"4\") {\n      romanCharToBeAdded =\n        romanNumDict[counter * 1] + romanNumDict[counter * 5];\n    } else if (currentDigit === \"9\") {\n      romanCharToBeAdded =\n        romanNumDict[counter * 1] + romanNumDict[counter * 10];\n    } else if (currentDigit >= 5) {\n      romanCharToBeAdded =\n        romanNumDict[counter * 5] +\n        romanNumDict[counter * 1].repeat(currentDigit - 5);\n    } else {\n      romanCharToBeAdded = romanNumDict[counter * 1].repeat(currentDigit);\n    }\n    ans = romanCharToBeAdded + ans;\n\n    pointer--;\n    counter *= 10;\n  }\n\n  return ans;\n};\n\nconst convertExpFromArabicToRoman = (givenExp) => {\n  let expArr = [];\n  let numStr = \"\";\n\n  for (let i = 0; i < givenExp.length; i++) {\n    if (!isOperator(givenExp[i]) || givenExp[i] === \".\") {\n      numStr += givenExp[i];\n    } else {\n      if (numStr.length > 0) {\n        expArr.push(Number(numStr));\n        numStr = \"\";\n      }\n      expArr.push(givenExp[i]);\n    }\n    if (i === givenExp.length - 1 && numStr.length > 0) {\n      expArr.push(Number(numStr));\n    }\n  }\n\n  for (let i = 0; i < expArr.length; i++) {\n    if (!isOperator(expArr[i])) {\n      expArr[i] = convertNumFromArabicToRoman(expArr[i]);\n      if (expArr[i].errorMsg) {\n        return {\n          errorMsg: expArr[i].errorMsg,\n        };\n      }\n    }\n  }\n  return expArr.join(\"\");\n};\n\nexport { convertNumFromArabicToRoman, convertExpFromArabicToRoman };\n","import { useReducer } from \"react\";\nimport { getArabicAns, isOperator } from \"../service/getArabicAns\";\nimport { convertExpFromRomanToArabic } from \"../service/convertRomanToArabic\";\nimport {\n  convertNumFromArabicToRoman,\n  convertExpFromArabicToRoman,\n} from \"../service/convertArabicToRoman\";\n\nconst initialState = {\n  isDarkMode: false,\n  isRomanMode: false,\n  input: \"\",\n  ans: \"\",\n  errorMsg: \"\",\n};\n\nconst getRomanAns = (input) => {\n  const arabicExp = convertExpFromRomanToArabic(input);\n  if (arabicExp.errorMsg) {\n    return arabicExp;\n  }\n  const arabicAns = getArabicAns(arabicExp);\n  const ansInRoman = convertNumFromArabicToRoman(arabicAns);\n\n  return ansInRoman;\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"TOGGLE_DARK_MODE\":\n      return { ...state, isDarkMode: !state.isDarkMode };\n\n    case \"CHANGE_LANG_MODE\":\n      let newAns = \"\";\n      let newInput = \"\";\n      let errorMsg = \"\";\n\n      if (state.isRomanMode && state.input) {\n        newInput = convertExpFromRomanToArabic(state.input);\n      } else if (state.input) {\n        newInput = convertExpFromArabicToRoman(state.input);\n      }\n      if (newInput.errorMsg) {\n        errorMsg = `Convert Err: ${newInput.errorMsg}`;\n        newAns = \"\";\n        newInput = state.input;\n        return {\n          ...state,\n          ans: newAns,\n          input: newInput,\n          errorMsg,\n        };\n      }\n\n      if (state.ans || state.ans === 0) {\n        if (state.isRomanMode) {\n          newAns = getArabicAns(newInput);\n        } else {\n          newAns = getRomanAns(newInput);\n        }\n      }\n\n      if (newAns.errorMsg) {\n        errorMsg = newAns.errorMsg;\n        newAns = \"\";\n      }\n\n      return {\n        ...state,\n        isRomanMode: !state.isRomanMode,\n        ans: newAns,\n        input: newInput,\n        errorMsg,\n      };\n\n    case \"GET_ANS\":\n      let ans;\n      if (state.isRomanMode) {\n        ans = getRomanAns(state.input);\n      } else {\n        ans = getArabicAns(state.input);\n      }\n\n      if (ans.errorMsg) {\n        return { ...state, errorMsg: ans.errorMsg, ans: \"\" };\n      }\n\n      return { ...state, ans, errorMsg: \"\" };\n\n    case \"ADD_NUMBER_TO_INPUT\":\n      if (state.ans || state.ans === 0) {\n        return {\n          ...state,\n          input: action.payload,\n          ans: \"\",\n        };\n      } else {\n        return { ...state, input: state.input + action.payload };\n      }\n\n    case `ADD_OPERATOR_OR_DOT_TO_INPUT`:\n      const lastChar = state.input[state.input.length - 1];\n      const isLastCharOperator = isOperator(lastChar) || lastChar === \".\";\n      if (state.ans || state.ans === 0) {\n        // add input to previous ans\n        return {\n          ...state,\n          input: state.ans + action.payload,\n          ans: \"\",\n          errorMsg: \"\",\n        };\n      }\n      if (isLastCharOperator) {\n        //to avoid two consecutive operator input, e.g. \"++\"\n        return {\n          ...state,\n          input: state.input.slice(0, state.input.length - 1) + action.payload,\n        };\n      }\n      return { ...state, input: state.input + action.payload };\n\n    case \"CLEAR_INPUT_&_ANS\":\n      return { ...state, ans: \"\", input: \"\", errorMsg: \"\" };\n\n    case \"HANDLE_INPUT_BACKSPACE\":\n      return {\n        ...state,\n        ans: \"\",\n        errorMsg: \"\",\n        input: state.input.slice(0, state.input.length - 1),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst useGlobalState = () => {\n  return useReducer(reducer, initialState);\n  //useReducer return modified state and a dispatch function\n  //dispatch function takes an action as a parameter\n};\n\nexport default useGlobalState;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body{\n    background: ${({ theme }) => theme.themeStyle.background};\n      color: ${({ theme }) => theme.themeStyle.text};\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n\n    box-sizing: border-box;\n  }\n\n  button {\n    width:${({ theme }) => theme.btnSize.default};\n    height: ${({ theme }) => theme.btnSize.default};\n    border-radius: 50%;\n    background: none;\n    border: 2px solid;\n    margin:2px;\n    font-size:1.5rem;\n    font-weight:500;\n    cursor:pointer;\n    &:focus {\n      outline: none;\n      box-shadow: 0 0 0 3px ${({ theme }) => theme.btnColor.focus};\n    }\n    &:hover {\n      color: ${({ theme }) => theme.themeStyle.background};\n    }\n      @media ${({ theme }) => theme.breakpoints.sm} {\n        width: ${({ theme }) => theme.btnSize.sm};\n        height: ${({ theme }) => theme.btnSize.sm};\n      }\n  }\n`;\n","const black = \"#18191A\";\nconst grey = \"#93a1a1\";\nconst lightGrey = \"#eee8d5\";\nconst white = \"#fdf6e3\";\nconst magenta = \"#d33682\";\nconst yellow = \"#b58900\";\nconst cyan = \"#2aa198\";\nconst violet = \"#6c71c4\";\nconst transparantGrey = \"rgba(147, 161, 161, 0.4)\";\n\nexport const theme = {\n  baseColor: grey,\n\n  light: {\n    text: black,\n    background: lightGrey,\n    switchColor: violet,\n  },\n  dark: {\n    text: white,\n    background: black,\n    switchColor: white,\n  },\n\n  romanStyle: {\n    color: yellow,\n  },\n\n  arabicStyle: {\n    color: cyan,\n  },\n\n  btnColor: {\n    function: magenta,\n    focus: transparantGrey,\n  },\n\n  btnSize: {\n    sm: \"18vw\",\n    default: \"68px\",\n  },\n\n  breakpoints: {\n    sm: \"(max-width: 540px)\",\n    // md: \"(max-width: 800px)\",\n    // lg: \"(max-width: 960px)\",  didn't use\n  },\n};\n","import React from \"react\";\nimport useGlobalState from \"./useGlobalState\";\nimport Context from \"./context\";\n\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"../StylesStore/GlobalStyles\";\nimport { theme } from \"../StylesStore/theme\";\n\nconst GlobalStateProvider = ({ children }) => {\n  const [state, dispatch] = useGlobalState();\n  const themeStyle = state.isDarkMode ? theme.dark : theme.light;\n  const langStyle = state.isRomanMode ? theme.romanStyle : theme.arabicStyle;\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <ThemeProvider theme={{ ...theme, themeStyle, langStyle }}>\n        <GlobalStyles />\n        {children}\n      </ThemeProvider>\n    </Context.Provider>\n    /*Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.\n    Context.Provider accepts a value prop to be passed to consuming components that are descendants of this Provider. \n    One Provider can be connected to many consumers. */\n  );\n};\n\nexport default GlobalStateProvider;\n","import React from \"react\";\nimport * as Styled from \"./App.styles.js\";\nimport Display from \"./Component/Display/Display\";\nimport Panel from \"./Component/Panel/Panel\";\nimport NumModeSwitch from \"./Component/NumModeSwitch/NumModeSwitch\";\nimport DarkModeSwitch from \"./Component/DarkModeSwitch/DarkModeSwitch\";\nimport GlobalStateProvider from \"./store/GloblaStateProvider\";\n\nexport function App() {\n  return (\n    <GlobalStateProvider>\n      <Styled.AppWrapper>\n        <DarkModeSwitch />\n        <Styled.CalcWrapper>\n          <Display />\n          <NumModeSwitch />\n          <Panel />\n        </Styled.CalcWrapper>\n      </Styled.AppWrapper>\n    </GlobalStateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}