{"version":3,"sources":["Logic/converterService.js","Component/Display/Display.js","Component/Button/Button.js","Logic/calculator.js","Logic/romanNumCalc.js","Logic/arabicNumCalc.js","Component/Panel/Panel.js","App.js","serviceWorker.js","index.js"],"names":["convertFromRomanToArabic","givenNum","romanNumDict","I","V","X","L","C","D","M","pointer","ans","length","currentAlphabet","nextAlphabet","convertFromArabicToRoman","givenNumStr","toString","counter","currentDigit","repeat","Display","input","setInput","type","value","onChange","e","target","Button","children","handleInput","onClick","Calculator","num1","num2","method","this","addition","subtraction","multiplication","division","require","RomanNumCalc","regex","test","matches","exec","ArabicNumCalc","Number","Panel","numBtns","mode","setAns","cancelAll","getAns","addInput","expression","validation","calculation","map","el","i","key","operators","App","useState","setMode","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4409bd6.chunk.js","sourcesContent":["const convertFromRomanToArabic = (givenNum) => {\n  let romanNumDict = {\n    I: 1,\n    V: 5,\n    X: 10,\n    L: 50,\n    C: 100,\n    D: 500,\n    M: 1000,\n  };\n\n  let pointer = 0;\n  let ans = 0;\n\n  while (pointer < givenNum.length) {\n    const currentAlphabet = givenNum[pointer];\n    const nextAlphabet = givenNum[pointer + 1];\n    const isSpecialCase1 =\n      currentAlphabet === \"I\" && (nextAlphabet === \"V\" || nextAlphabet === \"X\");\n    const isSpecialCase2 =\n      currentAlphabet === \"X\" && (nextAlphabet === \"L\" || nextAlphabet === \"C\");\n    const isSpecialCase3 =\n      currentAlphabet === \"C\" && (nextAlphabet === \"D\" || nextAlphabet === \"M\");\n\n    if (isSpecialCase1 || isSpecialCase2 || isSpecialCase3) {\n      const numToBeAdded =\n        romanNumDict[nextAlphabet] - romanNumDict[currentAlphabet];\n      ans += numToBeAdded;\n      pointer += 2;\n    } else {\n      ans += romanNumDict[currentAlphabet];\n      pointer++;\n    }\n  }\n\n  return ans;\n};\n\nconst convertFromArabicToRoman = (givenNum) => {\n  if (givenNum <= 0 || givenNum > 3999) {\n    return `Roman number can only in the following range: 0 <= n < 3999`;\n  }\n\n  let givenNumStr = givenNum.toString();\n\n  const romanNumDict = {\n    \"1\": \"I\",\n    \"5\": \"V\",\n    \"10\": \"X\",\n    \"50\": \"L\",\n    \"100\": \"C\",\n    \"500\": \"D\",\n    \"1000\": \"M\",\n  };\n\n  let pointer = givenNumStr.length - 1;\n  let counter = 1;\n  let ans = \"\";\n\n  while (pointer >= 0) {\n    const currentDigit = givenNumStr[pointer];\n\n    let romanCharToBeAdded;\n    if (currentDigit === \"4\") {\n      romanCharToBeAdded =\n        romanNumDict[counter * 1] + romanNumDict[counter * 5];\n    } else if (currentDigit === \"9\") {\n      romanCharToBeAdded =\n        romanNumDict[counter * 1] + romanNumDict[counter * 10];\n    } else if (currentDigit >= 5) {\n      romanCharToBeAdded =\n        romanNumDict[counter * 5] +\n        romanNumDict[counter * 1].repeat(currentDigit - 5);\n    } else {\n      romanCharToBeAdded = romanNumDict[counter * 1].repeat(currentDigit);\n    }\n    ans = romanCharToBeAdded + ans;\n\n    pointer--;\n    counter *= 10;\n  }\n\n  return ans;\n};\n\nexport { convertFromRomanToArabic, convertFromArabicToRoman };\n","import React from \"react\";\n\nfunction Display({ input, ans, setInput }) {\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n      ></input>\n      <p>{ans}</p>\n    </>\n  );\n}\n\nexport default Display;\n","import React from \"react\";\n\nconst Button = ({ children, handleInput }) => {\n  return <button onClick={() => handleInput(children)}>{children}</button>;\n};\n\nexport default Button;\n","class Calculator {\n  constructor(num1, num2, method) {\n    this.num1 = num1;\n    this.num2 = num2;\n    this.method = method;\n  }\n\n  addition() {\n    return this.num1 + this.num2;\n  }\n\n  subtraction() {\n    return this.num1 - this.num2;\n  }\n\n  multiplication() {\n    return this.num1 * this.num2;\n  }\n\n  division() {\n    return this.num1 / this.num2;\n  }\n\n  calculation() {\n    switch (this.method) {\n      case \"+\":\n        return this.addition();\n\n      case \"-\":\n        return this.subtraction();\n\n      case \"*\":\n        return this.multiplication();\n\n      case \"/\":\n        return this.division();\n\n      default:\n        //no sign is found\n        return this.num1;\n    }\n  }\n}\n\nexport default Calculator;\n// module.exports = Calculator;\n","// const Calculator = require(\"./calculator\");\nimport Calculator from \"./calculator\";\n\nconst {\n  convertFromRomanToArabic,\n  convertFromArabicToRoman,\n} = require(\"./converterService\");\n\nclass RomanNumCalc extends Calculator {\n  constructor(input) {\n    //need to be in front of any variable assignment\n    super();\n    this.input = input;\n  }\n\n  validation() {\n    let regex = /^([I|V|X|L|C|D|M]+)((\\+|\\-|\\*|\\/)([I|V|X|L|C|D|M]+))?$/g;\n    if (regex.test(this.input)) {\n      regex = /^([I|V|X|L|C|D|M]+)((\\+|\\-|\\*|\\/)([I|V|X|L|C|D|M]+))?$/g;\n      let matches = regex.exec(this.input);\n\n      this.num1 = convertFromRomanToArabic(matches[1]);\n      this.num2 = convertFromRomanToArabic(matches[4]);\n      this.method = matches[3];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  calculation() {\n    let ans = super.calculation();\n    return convertFromArabicToRoman(ans);\n  }\n}\n\n// let expression = new RomanNumCalc(\"MCC\");\n// expression.validation();\n// console.log(expression.calculation());\n\nexport default RomanNumCalc;\n","// const Calculator = require(\"./calculator\");\n// const { convertFromArabicToRoman } = require(\"./converterService\");\nimport Calculator from \"./calculator\";\n// import { convertFromArabicToRoman } from \"./converterService\";\n\nclass ArabicNumCalc extends Calculator {\n  constructor(input) {\n    super();\n    this.input = input;\n  }\n\n  validation() {\n    let regex = /^(\\d+)((\\+|\\-|\\*|\\/)(\\d+))?$/g;\n\n    if (regex.test(this.input)) {\n      regex = /^(\\d+)((\\+|\\-|\\*|\\/)(\\d+))?$/g;\n      const matches = regex.exec(this.input);\n\n      this.num1 = Number(matches[1]);\n      this.num2 = Number(matches[4]);\n      this.method = matches[3];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// let testing1 = new ArabicNumCalc(`777+777`);\n// testing1.validation();\n\nexport default ArabicNumCalc;\n","import React from \"react\";\nimport Button from \"../Button/Button\";\nimport RomanNumCalc from \"../../Logic/romanNumCalc\";\nimport ArabicNumCalc from \"../../Logic/arabicNumCalc\";\n\nfunction Panel({ mode, setInput, input, ans, setAns }) {\n  let handleInput = (children) => {\n    switch (children) {\n      case \"cancel\":\n        cancelAll();\n        break;\n      case \"=\":\n        getAns();\n        break;\n      default:\n        // when inputs are number\n        addInput(children);\n    }\n  };\n\n  const getAns = () => {\n    let expression;\n    if (mode === \"roman\") {\n      expression = new RomanNumCalc(input);\n    } else {\n      expression = new ArabicNumCalc(input);\n    }\n    if (expression.validation()) {\n      let ans = expression.calculation();\n      setAns(ans);\n    } else {\n      setAns(\"Invalid Input\");\n    }\n  };\n\n  const addInput = (children) => {\n    if (ans) {\n      setAns(\"\");\n      setInput(children);\n    } else {\n      setInput((input += children));\n    }\n  };\n\n  const cancelAll = () => {\n    setInput(\"\");\n    setAns(\"\");\n  };\n\n  let numBtns;\n  if (mode === \"roman\") {\n    numBtns = [`I`, `V`, `X`, `L`, `C`, `D`, `M`];\n  } else {\n    numBtns = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\n  }\n\n  numBtns = numBtns.map((el, i) => {\n    return (\n      <Button key={i} handleInput={handleInput}>\n        {el}\n      </Button>\n    );\n  });\n\n  let operators = [`+`, `-`, `*`, `/`, `cancel`, `=`];\n  operators = operators.map((el, i) => {\n    return (\n      <Button key={i} handleInput={handleInput}>\n        {el}\n      </Button>\n    );\n  });\n\n  return (\n    <div>\n      {numBtns}\n      {operators}\n    </div>\n  );\n}\n\nexport default Panel;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Display from \"./Component/Display/Display\";\nimport Panel from \"./Component/Panel/Panel\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"roman\");\n  const [input, setInput] = useState(\"\");\n  const [ans, setAns] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <Display ans={ans} input={input} setInput={setInput} />\n      <Panel\n        mode={mode}\n        setMode={setMode}\n        input={input}\n        setInput={setInput}\n        ans={ans}\n        setAns={setAns}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}